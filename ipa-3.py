{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5c971f1-8aca-4e80-a71e-fe326d3387ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Individual Programming Assignment 3\n",
    "\n",
    "70 points\n",
    "\n",
    "This assignment will develop your ability to manipulate data.\n",
    "'''\n",
    "\n",
    "def relationship_status(from_member, to_member, social_graph):\n",
    "    '''Relationship Status.\n",
    "    20 points.\n",
    "\n",
    "    Let us pretend that you are building a new app.\n",
    "    Your app supports social media functionality, which means that users can have\n",
    "    relationships with other users.\n",
    "\n",
    "    There are two guidelines for describing relationships on this social media app:\n",
    "    1. Any user can follow any other user.\n",
    "    2. If two users follow each other, they are considered friends.\n",
    "\n",
    "    This function describes the relationship that two users have with each other.\n",
    "\n",
    "    Please see \"assignment-4-sample-data.py\" for sample data. The social graph\n",
    "    will adhere to the same pattern.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    from_member: str\n",
    "        the subject member\n",
    "    to_member: str\n",
    "        the object member\n",
    "    social_graph: dict\n",
    "        the relationship data\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        \"follower\" if fromMember follows toMember,\n",
    "        \"followed by\" if fromMember is followed by toMember,\n",
    "        \"friends\" if fromMember and toMember follow each other,\n",
    "        \"no relationship\" if neither fromMember nor toMember follow each other.\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "\n",
    "    if from_member in social_graph.get(to_member, {}).get(\"following\", []):\n",
    "        \n",
    "        if to_member in social_graph.get(from_member, {}).get(\"following\", []):\n",
    "            return \"friends\"\n",
    "        return \"followed by\"\n",
    "\n",
    "    \n",
    "    if to_member in social_graph.get(from_member, {}).get(\"following\", []):\n",
    "        return \"follower\"\n",
    "\n",
    "    \n",
    "    return \"no relationship\"\n",
    "\n",
    "\n",
    "def tic_tac_toe(board):\n",
    "    '''Tic Tac Toe.\n",
    "    25 points.\n",
    "\n",
    "    Tic Tac Toe is a common paper-and-pencil game.\n",
    "    Players must attempt to successfully draw a straight line of their symbol across a grid.\n",
    "    The player that does this first is considered the winner.\n",
    "\n",
    "    This function evaluates a tic tac toe board and returns the winner.\n",
    "\n",
    "    Please see \"assignment-4-sample-data.py\" for sample data. The board will adhere\n",
    "    to the same pattern. The board may by 3x3, 4x4, 5x5, or 6x6. The board will never\n",
    "    have more than one winner. The board will only ever have 2 unique symbols at the same time.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    board: list\n",
    "        the representation of the tic-tac-toe board as a square list of lists\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the symbol of the winner or \"NO WINNER\" if there is no winner\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "\n",
    "def tic_tac_toe(board):\n",
    "    for row in board:\n",
    "        if len(set(row)) == 1 and row[0] != '':\n",
    "            return row[0]\n",
    "    \n",
    "    for col in range(len(board)):\n",
    "        if len(set([board[row][col] for row in range(len(board))])) == 1 and board[0][col] != '':\n",
    "            return board[0][col]\n",
    "    \n",
    "    if len(set([board[i][i] for i in range(len(board))])) == 1 and board[0][0] != '':\n",
    "        return board[0][0]\n",
    "    if len(set([board[i][len(board)-1-i] for i in range(len(board))])) == 1 and board[0][len(board)-1] != '':\n",
    "        return board[0][len(board)-1]\n",
    "    \n",
    "    return \"NO WINNER\"\n",
    "\n",
    "board1 = [\n",
    "    ['X','X','O'],\n",
    "    ['O','X','O'],\n",
    "    ['O','','X'],\n",
    "]\n",
    "\n",
    "board2 = [\n",
    "    ['X','X','O'],\n",
    "    ['O','X','O'],\n",
    "    ['','O','X'],\n",
    "]\n",
    "\n",
    "board3 = [\n",
    "    ['O','X','O'],\n",
    "    ['','O','X'],\n",
    "    ['X','X','O'],\n",
    "]\n",
    "\n",
    "board4 = [\n",
    "    ['X','X','X'],\n",
    "    ['O','X','O'],\n",
    "    ['O','','O'],\n",
    "]\n",
    "\n",
    "board5 = [\n",
    "    ['X','X','O'],\n",
    "    ['O','X','O'],\n",
    "    ['X','','O'],\n",
    "]\n",
    "\n",
    "board6 = [\n",
    "    ['X','X','O'],\n",
    "    ['O','X','O'],\n",
    "    ['X','',''],\n",
    "]\n",
    "\n",
    "board7 = [\n",
    "    ['X','X','O',''],\n",
    "    ['O','X','O','O'],\n",
    "    ['X','','','O'],\n",
    "    ['O','X','','']\n",
    "]\n",
    "\n",
    "winner1 = tic_tac_toe(board1)\n",
    "winner2 = tic_tac_toe(board2)\n",
    "winner3 = tic_tac_toe(board3)\n",
    "winner4 = tic_tac_toe(board4)\n",
    "winner5 = tic_tac_toe(board5)\n",
    "winner6 = tic_tac_toe(board6)\n",
    "winner7 = tic_tac_toe(board7)\n",
    "\n",
    "def eta(first_stop, second_stop, route_map):\n",
    "    '''ETA.\n",
    "    25 points.\n",
    "\n",
    "    A shuttle van service is tasked to travel along a predefined circlar route.\n",
    "    This route is divided into several legs between stops.\n",
    "    The route is one-way only, and it is fully connected to itself.\n",
    "\n",
    "    This function returns how long it will take the shuttle to arrive at a stop\n",
    "    after leaving another stop.\n",
    "\n",
    "    Please see \"mod-4-ipa-1-sample-data.py\" for sample data. The route map will\n",
    "    adhere to the same pattern. The route map may contain more legs and more stops,\n",
    "    but it will always be one-way and fully enclosed.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    first_stop: str\n",
    "        the stop that the shuttle will leave\n",
    "    second_stop: str\n",
    "        the stop that the shuttle will arrive at\n",
    "    route_map: dict\n",
    "        the data describing the routes\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    int\n",
    "        the time it will take the shuttle to travel from first_stop to second_stop\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "\n",
    "def eta(first_stop, second_stop, route_map):\n",
    "    current_stop = first_stop\n",
    "    total_time = 0\n",
    "\n",
    "    while current_stop != second_stop:\n",
    "        next_stop = route_map[current_stop]['next']\n",
    "        travel_time = route_map[current_stop]['time']\n",
    "        total_time += travel_time\n",
    "        current_stop = next_stop\n",
    "\n",
    "    return total_time\n",
    "\n",
    "\n",
    "route_map = {\n",
    "    'stop1': {'next': 'stop2', 'time': 5},\n",
    "    'stop2': {'next': 'stop3', 'time': 3},\n",
    "    'stop3': {'next': 'stop4', 'time': 7},\n",
    "    'stop4': {'next': 'stop1', 'time': 4}\n",
    "}\n",
    "\n",
    "first_stop = 'stop1'\n",
    "second_stop = 'stop3'\n",
    "\n",
    "\n",
    "travel_time = eta(first_stop, second_stop, route_map)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
